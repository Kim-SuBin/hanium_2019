{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["CHART_DATA","columns","type","CHART_DATA2","CHART_DATA3","CHART_DATA4","CHART_DATA5","CHART_DATA6","CHART_DATA7","App","data","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2RAMMA,G,MAAa,CACjBC,QAAS,CACP,CAAC,QAAS,GAAI,GAAI,GAAI,GAAI,GAAI,IAC9B,CAAC,QAAS,IAAK,IAAK,GAAI,IAAK,IAAK,KAClC,CAAC,QAAS,IAAK,IAAK,IAAK,IAAK,IAAK,MAErCC,KAAM,SAGFC,EAAc,CAClBF,QAAS,CACP,CAAC,QAAS,GAAI,GAAI,GAAI,GAAI,GAAI,IAC9B,CAAC,QAAS,IAAK,IAAK,GAAI,IAAK,IAAK,KAClC,CAAC,QAAS,IAAK,IAAK,IAAK,IAAK,IAAK,MAErCC,KAAM,OAGFE,EAAc,CAChBH,QAAS,CACP,CAAC,QAAS,GAAI,GAAI,GAAI,GAAI,GAAI,IAC9B,CAAC,QAAS,IAAK,IAAK,GAAI,IAAK,IAAK,KAClC,CAAC,QAAS,IAAK,IAAK,IAAK,IAAK,IAAK,MAErCC,KAAM,SAEFG,EAAc,CAClBJ,QAAS,CACP,CAAC,QAAS,GAAI,GAAI,GAAI,GAAI,GAAI,IAC9B,CAAC,QAAS,IAAK,IAAK,GAAI,IAAK,IAAK,KAClC,CAAC,QAAS,IAAK,IAAK,IAAK,IAAK,IAAK,MAErCC,KAAM,SAEFI,EAAc,CAClBL,QAAS,CACP,CAAC,QAAS,GAAI,GAAI,GAAI,GAAI,GAAI,IAC9B,CAAC,QAAS,IAAK,IAAK,GAAI,IAAK,IAAK,KAClC,CAAC,QAAS,IAAK,IAAK,IAAK,IAAK,IAAK,MAErCC,KAAM,OAEFK,EAAc,CAClBN,QAAS,CACP,CAAC,QAAS,GAAI,GAAI,GAAI,GAAI,GAAI,IAC9B,CAAC,QAAS,IAAK,IAAK,GAAI,IAAK,IAAK,KAClC,CAAC,QAAS,IAAK,IAAK,IAAK,IAAK,IAAK,MAErCC,KAAM,SAEFM,EAAc,CAClBP,QAAS,CACP,CAAC,QAAS,GAAI,GAAI,GAAI,GAAI,GAAI,IAC9B,CAAC,QAAS,IAAK,IAAK,GAAI,IAAK,IAAK,KAClC,CAAC,QAAS,IAAK,IAAK,IAAK,IAAK,IAAK,MAErCC,KAAM,QAmBKO,E,iLAdT,OACI,oCACI,kBAAC,IAAD,CAAgBC,KAAMV,IACtB,kBAAC,IAAD,CAAgBU,KAAMP,IACtB,kBAAC,IAAD,CAAgBO,KAAMN,IACtB,kBAAC,IAAD,CAAgBM,KAAML,IACtB,kBAAC,IAAD,CAAgBK,KAAMJ,IACtB,kBAAC,IAAD,CAAgBI,KAAMH,IACtB,kBAAC,IAAD,CAAgBG,KAAMF,S,GAVhBG,aCrDAC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f979a79a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nimport BillboardChart from \"react-billboardjs\";\nimport \"react-billboardjs/lib/billboard.css\";\n \nconst CHART_DATA = {\n  columns: [\n    [\"data1\", 30, 20, 50, 40, 60, 50],\n    [\"data2\", 200, 130, 90, 240, 130, 220],\n    [\"data3\", 300, 200, 160, 400, 250, 250]\n  ],\n  type: \"line\"\n};\n\nconst CHART_DATA2 = {\n  columns: [\n    [\"data1\", 30, 20, 50, 40, 60, 50],\n    [\"data2\", 200, 130, 90, 240, 130, 220],\n    [\"data3\", 300, 200, 160, 400, 250, 250]\n  ],\n  type: \"bar\"\n};\n\nconst CHART_DATA3 = {\n    columns: [\n      [\"data1\", 30, 20, 50, 40, 60, 50],\n      [\"data2\", 200, 130, 90, 240, 130, 220],\n      [\"data3\", 300, 200, 160, 400, 250, 250]\n    ],\n    type: \"radar\"\n  };\n  const CHART_DATA4 = {\n    columns: [\n      [\"data1\", 30, 20, 50, 40, 60, 50],\n      [\"data2\", 200, 130, 90, 240, 130, 220],\n      [\"data3\", 300, 200, 160, 400, 250, 250]\n    ],\n    type: \"donut\"\n  };\n  const CHART_DATA5 = {\n    columns: [\n      [\"data1\", 30, 20, 50, 40, 60, 50],\n      [\"data2\", 200, 130, 90, 240, 130, 220],\n      [\"data3\", 300, 200, 160, 400, 250, 250]\n    ],\n    type: \"pie\"\n  };\n  const CHART_DATA6 = {\n    columns: [\n      [\"data1\", 30, 20, 50, 40, 60, 50],\n      [\"data2\", 200, 130, 90, 240, 130, 220],\n      [\"data3\", 300, 200, 160, 400, 250, 250]\n    ],\n    type: \"gauge\"\n  };\n  const CHART_DATA7 = {\n    columns: [\n      [\"data1\", 30, 20, 50, 40, 60, 50],\n      [\"data2\", 200, 130, 90, 240, 130, 220],\n      [\"data3\", 300, 200, 160, 400, 250, 250]\n    ],\n    type: \"area\"\n  };\n  \n  class App extends Component {\n    render() {\n      return (\n          <>\n              <BillboardChart data={CHART_DATA} />\n              <BillboardChart data={CHART_DATA2} />\n              <BillboardChart data={CHART_DATA3} />\n              <BillboardChart data={CHART_DATA4} />\n              <BillboardChart data={CHART_DATA5} />\n              <BillboardChart data={CHART_DATA6} />\n              <BillboardChart data={CHART_DATA7} />\n          </>\n      );\n    }\n  }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}